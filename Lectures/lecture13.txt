Lecture 13
Assembly Code Pt 2


------------------------------------------------
Address Computation  %edx=0xf000 %ecx=0x100    |
------------------------------------------------
Expression   | Computation   | Address(effective
-------------|---------------|------------------
0x8(%edx)    |0xf000 + 0x8   | 0xf008
(%edx,%ecx)  |0xf000 + 0x100 | 0xf100
(%edx,%ecx,4)|0xf000+4*0x100 | 0xf400
0x80(,%edx,2)|2*0xf000 + 0x80| 0x1e080


------------------
calll Instruction|
------------------
Calls function
  -pushing return address to the top of the stack
  -HARDWARE moves Program Counter to the function
  -arguments are right underneath the function on the stack (right to left - going down the stack)

calll   _swap


------------------
leal Instruction |
------------------
Load Effective Address Function
  -Computes Effective Address
  -puts EFFECTIVE ADDRESS into destination register
  -DOES NOT TOUCH MEMORY
  -Essentially moves the address to destination register


-----------------
xorl Instruction|
-----------------
Initialize 0
xorl    %eax,%eax


-----------------
popl Instruction|
-----------------
Pops arguments out of the stack (prologue function, used when you finished)


-----------------
Return Values   |
-----------------
In 32 bit, return value will ALWAYS be in register %eax

---------------------------------------------------------------------------------------------------------------
Establishing the Stack Invariants - area b/n %esp and %ebp is the Activation Record                           |
---------------------------------------------------------------------------------------------------------------


memory
addreses
low
    0|___________________________________
     | Code
     | globals
     | heap ↓
     |
     | %esp
     | Stack Invariant (Local variables)
     | %ebp
     | stack ↑
     |___________________________________
high 


-Stack grows towards lower addresses (for Linux x86 machines)
-Each instruction pushed on the stack gets a lower memory address
-Local Variables get added to stack invariant


