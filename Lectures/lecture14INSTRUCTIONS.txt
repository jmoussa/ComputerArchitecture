Lecture 14 3/3/2016

----------------------------------------
Address Computation Instruction        |
----------------------------------------
leal: compute addres using addressing mode WITHOUT accessing memory

leal <src>, <dest>
  -src: address mode expression
  -set dest to address specified by src

Use:
  Computing address without doing memory reference
    p = &x[i];

Example:
  leal 7(%edx, %edx, 4), %eax
  eax = 4*edx + edx + 7 = 

-----------------------------------------
Instructions                            |
-----------------------------------------

addl src,dest   dest=dest+src
subl src,dest   dest=dest-src
imull src,dest  dest=dest*src
sall src,dest   dest=dest << src | shift arithmetic left   | multiply by 2^<base/shift amount>  |  shift 1s to left, free spaces are filled by 0s
sarl src,dest   dest=dest >> src | shift arithmetic right  | divide by 2^<base>                 |  shift 1s to right, free spaces are filled with 1s
xorl src,dest   dest=dest^src     
andl src,dest   dest=dest & src   
orl src,dest    dest=dest | src   

cmpl src1,src2 | subtract (src2 - src1) src2<=src1 | Conditional Equation
test a,b | add a,b (cannot use jle)

jle dest | Jump to <dest> header 

incl dest   dest=dest+1
decl dest   dest=dest-1
negl dest   dest= -dest   |   two's complement negation
notl dest   dest= ~dest   |

setX
  Set single byte based on combinations of condition codes
  One of 8 addressable byte registers


-------------------------------------------
leal for Arithmetic Expressions           |
-------------------------------------------

int arith(int x, int y, int z){
  int t1 = x+y;
  int t2 = z+t1;
  int t3 = x+4;
  int t4 = y*48;
  int t5 = t3+t4;
  int rval = t2*t5;
  return rval;

}
//Evaluation of rval
rval =    t2    *     t5
rval = (2+(x+y))*(x+4)+(y*48)



//Setup
arith:                      Setup
  pushl %ebp                |
  movl $esp, %ebp           |

//Body                      Body
  movl 8(%ebp), %eax        | x == %eax
  movl 12(%ebp), %edx       | y == %edx
  leal(%edx,%eax), %ecx     | x + y == %ecx 
  leal (%edx,%edx,2),%ecx   | %edx + 2(%edx) == 3*y == %ecx
  sall $4,%edx              | %edx*2^4 == 48*y
  addl 16(%ebp),%ecx        | z + %ecx == z + 3 * y
  leal 4(%edx,%eax),%eax    | 
  imull %ecx,%eax           | 

//Finish                    Finish
  movl %ebp,%esp            |
  popl %ebp,%esp            |
  ret                       |


