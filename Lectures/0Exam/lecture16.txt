Lecture 16  3/10

=============================================
Switch Statements                           |
=============================================

Series of Conditionals
  -Good for few cases
  -Each case ends with a return/break
  -default case at end

------------------------------------
Convert to Assesmbly               |
------------------------------------

For each case, generate a code block
  -populate all blocks in a Jump Table
    -jtab
  -Approx. Translation to C
    target=jtab[op];
    goto *target;
    
Labels for each case: (compiler does it for you)

Enum Values:
---------------
ADD    0
MULT   1
MINUS  2
DIV    3
MOD    4
BAD    5


Setup:
---------------
unparse_symbol_function:
  pushl %ebp              #setup
  movl %esp,%ebp          #setup
  movl 8(%ebp), %eax      #eax = op
  cmpl $5, %eax           #compare op : 5
  ja .L49                 #if > goto DONE
  jmp *.L57 (,eax,4)      #goto jumpTable[op]
                            #start of jump table denoted by label .L57
                            #register %eax holds op
                            #must scale by factor of 4 to get offset into table (int enum)
                            #fetch target from effective address .L57 + op*4
Finish
---------------
.L49:
  movl %ebp, %esp
  popl %ebp
  ret


============================================
Stack Frames                               |
============================================
-Positive Offsets are arguments
-Negative Offsetes are local variables
-call instruction moves old %ebp to top of stack so it can be registered when called method returns

"Caller Save" Temporaries (parent function saves)
  Caller saves temporary in its frame before calling
  %eax, %edx, %ecx
  
"Callee Save" Temporaries (child function saves old value)
  Callee saves temporary in its frame before using
  %ebx, %esi, %edi

Special
  %esp (stack pointer) 
  %ebp (frame pointer)


=============================================
Recursive Functions                         |
=============================================

rfact:
  pushl  %ebp
  movl  %esp, %ebp
  pushl  %ebx
  movl  8(%ebp), %ebx     #argument t1 == %ebx
  cmpl  $1, %ebx          #if(1>=%ebx)
  jle  .L78               #jump to .L78 (%eax = 1)
  leal  -1(%ebx), %eax    #t1 - 1 (%ebx - 1) store in %eax
  pushl  %eax             #argument to function rfact
  call  rfact             #call rfact(%eax=t1-1)
  imull  %ebx, %eax       #%eax = $ebx * %eax
  jmp  .L79
  .align  4

.L78:
  movl $1, %eax

.L79
  movl -4(%ebp), %ebx
  movl %ebp, %esp
  popl %ebp
  ret                    #return whatever is in %eax
